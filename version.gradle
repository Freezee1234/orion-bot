class ApplicationVersion {
    Integer major
    Integer minor
    Integer patch

    ApplicationVersion(Integer major, Integer minor, Integer patch) {
        this.major = major
        this.minor = minor
        this.patch = patch
    }

    String getVersion() {
        return "$major.$minor.$patch"
    }
}

ext.loadVersion = { ->
    def versionPropertiesFile = file('version.properties')

    if(!versionPropertiesFile.exists()) {
        throw new Exception('No version.properties file found')
    }

    Properties versionProperties = new Properties()

    versionPropertiesFile.withInputStream { stream ->
        versionProperties.load(stream)
    }
    return new ApplicationVersion(
        versionProperties.major as Integer,
        versionProperties.minor as Integer,
        versionProperties.patch as Integer
    )
}

tasks.register("majorVersionUpdate") {
    group = "versioning"
    description = "Bump to next major version"
    doFirst {
        ant.propertyfile(file: 'version.properties') {
            entry(key: 'major', type: 'int', operation: '+', value: 1)
            entry(key: 'minor', type: 'int', operation: '=', value: 0)
            entry(key: 'patch', type: 'int', operation: '=', value: 0)
        }
    }
}

tasks.register("minorVersionUpdate") {
    group = "versioning"
    description = "Bump to next minor version"
    doFirst {
        ant.propertyfile(file: 'version.properties') {
            entry(key: 'minor', type: 'int', operation: '+', value: 1)
            entry(key: 'patch', type: 'int', operation: '=', value: 0)
        }
    }
}

tasks.register("patchVersionUpdate") {
    group = "versioning"
    description = "Bump to next patch version"
    doFirst {
        ant.propertyfile(file: 'version.properties') {
            entry(key: 'patch', type: 'int', operation: '+', value: 1)
        }
    }
}

tasks.register("printVersion") {
    group = "versioning"
    description = "Return version"
    doLast {
        println loadVersion().getVersion()
    }
}
