plugins {
	id 'java'
	// ShadowJar
	// https://mvnrepository.com/artifact/com.gradleup.shadow/shadow-gradle-plugin
	id 'com.gradleup.shadow' version '9.0.0-beta15'
}

// Getting version
apply from: 'version.gradle'

String version = loadVersion().getVersion()
String mainClassName = 'dev.fileeditor.votl.Main'

repositories {
	// Use Maven Central for resolving dependencies
	mavenCentral()
}

dependencies {
	// JDA library and additions
	// https://mvnrepository.com/artifact/net.dv8tion/JDA
	implementation('net.dv8tion:JDA:5.6.1') {						// JDA library
		exclude module: 'opus-java'
	}
	// https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
	implementation 'ch.qos.logback:logback-classic:1.5.18'			// Logging (required by JDA)

	// Tools
	// https://mvnrepository.com/artifact/com.jayway.jsonpath/json-path
	implementation 'com.jayway.jsonpath:json-path:2.9.0'			// json path-er
	// https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
	implementation 'org.xerial:sqlite-jdbc:3.50.1.0'				// sqlite database
	// https://mvnrepository.com/artifact/org.jsoup/jsoup
	implementation 'org.jsoup:jsoup:1.20.1'							// HTML tools
	// https://mvnrepository.com/artifact/io.github.java-diff-utils/java-diff-utils
	implementation 'io.github.java-diff-utils:java-diff-utils:4.15'	// Diff finder
	// https://mvnrepository.com/artifact/org.json/json
	implementation 'org.json:json:20250517'							// JsonObject
	// https://mvnrepository.com/artifact/com.github.ben-manes.caffeine/caffeine
	implementation 'com.github.ben-manes.caffeine:caffeine:3.2.1'	// Cache
	// https://mvnrepository.com/artifact/org.reflections/reflections
	implementation 'org.reflections:reflections:0.10.2'				// Reflections for auto-load
	// https://mvnrepository.com/artifact/commons-cli/commons-cli
	implementation 'commons-cli:commons-cli:1.9.0'					// CLI arguments

	// Eval
	// https://mvnrepository.com/artifact/org.apache.groovy/groovy
	implementation 'org.apache.groovy:groovy:4.0.27'				// Groovy - code evaluation
}

java {
	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_21
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(21))
	}
}

// jar's Manifest
tasks.jar {
	enabled = false
}

// ShadowJar + copy to base folder
tasks.build {
	dependsOn(shadowJar)

	doLast {
		copy {
			from('build/libs') {
				include 'VOTL-*.jar'
			}
			into '.'
			rename 'VOTL-(.*).jar', 'VOTL.jar'
		}
	}
}

// ShadowJar config
tasks.shadowJar {
	archiveBaseName = 'VOTL'
	archiveVersion = version
	archiveClassifier = ''
	minimize {
		exclude(dependency('ch.qos.logback:logback-classic:.*'))
		exclude(dependency('org.xerial:sqlite-jdbc:.*'))
		exclude(dependency('com.github.ben-manes.caffeine:caffeine:.*'))
		exclude(dependency('org.apache.groovy:groovy:.*'))
	}

	exclude('META-INF/*.SF')
	exclude('META-INF/*.DSA')
	exclude('META-INF/*.RSA')
	exclude('META-INF/LICENSE*')
	exclude('META-INF/NOTICE*')
	exclude('META-INF/DEPENDENCIES')

	manifest {
		attributes 'Implementation-Title': 'VOTL Bot',
				'Implementation-Version': getFullVersion(version),
				'Implementation-Vendor': 'FiLe group',
				'Main-Class': mainClassName
	}
}

String getFullVersion(String baseVersion) {
	def sha = project.findProperty("sha") as String
	def isSnapshot = project.hasProperty("snap")

	def fullVersion = baseVersion

	if (isSnapshot) {
		fullVersion += "-SNAPSHOT"
	}
	if (sha != null) {
		fullVersion += "+${sha}"
	}

	// Use this version as the project version
	return fullVersion
}

compileJava.options.encoding = 'UTF-8'
